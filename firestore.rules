/**
 * @fileoverview Firestore Security Rules for the personal finance application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user has full control over their own data related to people, credit cards, and purchases.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, ensuring that data is isolated to individual users. Specifically:
 * - /users/{userId}/people/{personId}
 * - /users/{userId}/creditCards/{creditCardId}
 * - /users/{userId}/purchases/{purchaseId}
 *
 * Key Security Decisions:
 * - Users can only access data under their own userId.
 * - List operations are allowed within a user's own data tree.
 * - Schema validation is relaxed in this prototyping phase, focusing on authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures the /users/{userId}/people/{personId} collection. Enforces that only the owner can read, create, update, and delete their own person documents.
     * @path /users/{userId}/people/{personId}
     * @allow (create) User fKi7buS5IBbtPaeV8DtAgFaYoh13 creates a new person document under /users/fKi7buS5IBbtPaeV8DtAgFaYoh13/people/person123.
     * @allow (get) User fKi7buS5IBbtPaeV8DtAgFaYoh13 retrieves the person document /users/fKi7buS5IBbtPaeV8DtAgFaYoh13/people/person123.
     * @allow (list) User fKi7buS5IBbtPaeV8DtAgFaYoh13 lists all person documents under /users/fKi7buS5IBbtPaeV8DtAgFaYoh13/people.
     * @allow (update) User fKi7buS5IBbtPaeV8DtAgFaYoh13 updates the person document /users/fKi7buS5IBbtPaeV8DtAgFaYoh13/people/person123.
     * @allow (delete) User fKi7buS5IBbtPaeV8DtAgFaYoh13 deletes the person document /users/fKi7buS5IBbtPaeV8DtAgFaYoh13/people/person123.
     * @deny (create) User abc tries to create a person document under /users/fKi7buS5IBbtPaeV8DtAgFaYoh13/people/person123.
     * @deny (get) User abc tries to retrieve the person document /users/fKi7buS5IBbtPaeV8DtAgFaYoh13/people/person123.
     * @deny (list) User abc tries to list all person documents under /users/fKi7buS5IBbtPaeV8DtAgFaYoh13/people.
     * @deny (update) User abc tries to update the person document /users/fKi7buS5IBbtPaeV8DtAgFaYoh13/people/person123.
     * @deny (delete) User abc tries to delete the person document /users/fKi7buS5IBbtPaeV8DtAgFaYoh13/people/person123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/people/{personId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secures the /users/{userId}/creditCards/{creditCardId} collection. Enforces that only the owner can read, create, update, and delete their own credit card documents.
     * @path /users/{userId}/creditCards/{creditCardId}
     * @allow (create) User fKi7buS5IBbtPaeV8DtAgFaYoh13 creates a new credit card document under /users/fKi7buS5IBbtPaeV8DtAgFaYoh13/creditCards/card123.
     * @allow (get) User fKi7buS5IBbtPaeV8DtAgFaYoh13 retrieves the credit card document /users/fKi7buS5IBbtPaeV8DtAgFaYoh13/creditCards/card123.
     * @allow (list) User fKi7buS5IBbtPaeV8DtAgFaYoh13 lists all credit card documents under /users/fKi7buS5IBbtPaeV8DtAgFaYoh13/creditCards.
     * @allow (update) User fKi7buS5IBbtPaeV8DtAgFaYoh13 updates the credit card document /users/fKi7buS5IBbtPaeV8DtAgFaYoh13/creditCards/card123.
     * @allow (delete) User fKi7buS5IBbtPaeV8DtAgFaYoh13 deletes the credit card document /users/fKi7buS5IBbtPaeV8DtAgFaYoh13/creditCards/card123.
     * @deny (create) User abc tries to create a credit card document under /users/fKi7buS5IBbtPaeV8DtAgFaYoh13/creditCards/card123.
     * @deny (get) User abc tries to retrieve the credit card document /users/fKi7buS5IBbtPaeV8DtAgFaYoh13/creditCards/card123.
     * @deny (list) User abc tries to list all credit card documents under /users/fKi7buS5IBbtPaeV8DtAgFaYoh13/creditCards.
     * @deny (update) User abc tries to update the credit card document /users/fKi7buS5IBbtPaeV8DtAgFaYoh13/creditCards/card123.
     * @deny (delete) User abc tries to delete the credit card document /users/fKi7buS5IBbtPaeV8DtAgFaYoh13/creditCards/card123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/creditCards/{creditCardId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secures the /users/{userId}/purchases/{purchaseId} collection. Enforces that only the owner can read, create, update, and delete their own purchase documents.
     * @path /users/{userId}/purchases/{purchaseId}
     * @allow (create) User fKi7buS5IBbtPaeV8DtAgFaYoh13 creates a new purchase document under /users/fKi7buS5IBbtPaeV8DtAgFaYoh13/purchases/purchase123.
     * @allow (get) User fKi7buS5IBbtPaeV8DtAgFaYoh13 retrieves the purchase document /users/fKi7buS5IBbtPaeV8DtAgFaYoh13/purchases/purchase123.
     * @allow (list) User fKi7buS5IBbtPaeV8DtAgFaYoh13 lists all purchase documents under /users/fKi7buS5IBbtPaeV8DtAgFaYoh13/purchases.
     * @allow (update) User fKi7buS5IBbtPaeV8DtAgFaYoh13 updates the purchase document /users/fKi7buS5IBbtPaeV8DtAgFaYoh13/purchases/purchase123.
     * @allow (delete) User fKi7buS5IBbtPaeV8DtAgFaYoh13 deletes the purchase document /users/fKi7buS5IBbtPaeV8DtAgFaYoh13/purchases/purchase123.
     * @deny (create) User abc tries to create a purchase document under /users/fKi7buS5IBbtPaeV8DtAgFaYoh13/purchases/purchase123.
     * @deny (get) User abc tries to retrieve the purchase document /users/fKi7buS5IBbtPaeV8DtAgFaYoh13/purchases/purchase123.
     * @deny (list) User abc tries to list all purchase documents under /users/fKi7buS5IBbtPaeV8DtAgFaYoh13/purchases.
     * @deny (update) User abc tries to update the purchase document /users/fKi7buS5IBbtPaeV8DtAgFaYoh13/purchases/purchase123.
     * @deny (delete) User abc tries to delete the purchase document /users/fKi7buS5IBbtPaeV8DtAgFaYoh13/purchases/purchase123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/purchases/{purchaseId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isSignedIn() && isOwner(userId) && resource != null;
  }
}